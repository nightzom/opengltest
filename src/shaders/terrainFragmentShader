#version 130

varying vec2 pass_textureCoords;
varying vec3 pass_surfaceNormal;
varying vec3 pass_toLightVector;
varying vec3 pass_toCameraVector;
varying float pass_visibility;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void) {

	vec4 blendMapColour = texture(blendMap, pass_textureCoords);
	
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tiledCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColour = texture(rTexture, tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture, tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture, tiledCoords) * blendMapColour.b;
	
	vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;
	
	vec3 unitNormal = normalize(pass_surfaceNormal);
	vec3 unitLightVector = normalize(pass_toLightVector);
	
	float nDot1 = dot(unitNormal,unitLightVector);
	float brightness = max(nDot1,0.0);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitVectorToCamera = normalize(pass_toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.2);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * lightColour;
	
	vec4 outColour = vec4(diffuse, 1.0) * totalColour;
	gl_FragColor = mix(vec4(skyColour,1.0), outColour, pass_visibility);
}